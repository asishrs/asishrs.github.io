<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>defletvar</title>
    <description>asishrs.com</description>
    <link>http://asishrs.com/</link>
    <atom:link href="http://asishrs.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 17 Oct 2018 23:43:06 -0700</pubDate>
    <lastBuildDate>Wed, 17 Oct 2018 23:43:06 -0700</lastBuildDate>
    <generator>Jekyll v3.6.3</generator>
    
      <item>
        <title>Spring Cloud Config Auto Refresh + Custom Kafka topic</title>
        <description>&lt;p&gt;Spring Cloud Config is one of the best features that Spring provides as part of the framework. Spring Cloud Config allows your java application to follow Externalized configuration pattern which is must have if you are building microservices. Additionally, you can also enable the automatic config refresh in Spring Cloud Config so that all your components receive the latest configuration values when there is a change in the configuration. For automatic configuration delivery, Spring Cloud use Kafka or RabbitMQ messaging platforms. This article is going to explain how to define your own Kafka topics with Spring Cloud Config.&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Oct 2018 00:00:00 -0700</pubDate>
        <link>http://asishrs.com/blog/2018/Spring-Cloud-Config-Auto-Refresh-Custom-Kafka-topic/</link>
        <guid isPermaLink="true">http://asishrs.com/blog/2018/Spring-Cloud-Config-Auto-Refresh-Custom-Kafka-topic/</guid>
        
        <category>spring</category>
        
        <category>spring-cloud-config</category>
        
        <category>config-refresh</category>
        
        <category>kafka</category>
        
        <category>ssl</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Docker limit resource utilization using cgroup-parent</title>
        <description>&lt;p&gt;One of the things you have to keep in mind in the cloud journey is limiting the resources (CPU and memory) for all running containers. Restrict CPU and Memory utilization across all containers is very important especially if you are running multiple containers. Docker presents an option called cgroup-parent for this purpose. You can check the official docker documentation on cgroup-parent here. Unfortunately, docker documentation doesnâ€™t provide enough details for you start using use cgroup-parent. You can continue to read this post if you are still looking a way to apply resource limitation to your containers.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Oct 2018 00:00:00 -0700</pubDate>
        <link>http://asishrs.com/blog/2018/docker-limit-resource-utilization-using-cgroup-parent/</link>
        <guid isPermaLink="true">http://asishrs.com/blog/2018/docker-limit-resource-utilization-using-cgroup-parent/</guid>
        
        <category>docker</category>
        
        <category>cgroup</category>
        
        <category>resources</category>
        
        <category>cgroup-parent</category>
        
        <category>container</category>
        
        
        <category>cloud</category>
        
      </item>
    
  </channel>
</rss>
